////////////////////////////////////////////////////////////////////////////////
// FUNCTIONS
// -----------------------------------------------------------------------------

/// Retrieve color from $palette map
@function color($color, $palette: $colors) {
  // Correctly set $color variable:
  @if map-has-key($palette, $color) {
    // $color is in $palette, set variable = map-value
    $color: map-get($palette, $color);
    $base: nth($color, 1);
    $adjust: if(length($color) > 1, nth($color, 2), ());
    // Recursive check
    $color: if(map-has-key($palette, $base), color($base), $base);
    // Adjustments
    @each $function, $value in $adjust {
      @if function-exists($function) {
        $color: call($function, $color, $value...);
      } @else {
        @warn '#{$function} is not a valid color function.';
      }
    }
    @return $color;
  } @else {
    @if type-of($color) != color {
      // $color is not in $color and $color is not a color
      @error 'Invalid color.';
    }
  }
}

/// Retrieve color and set its opacity.
@function alpha($color, $amount: 0.5) {
  @return rgba(color($color), $amount);
}
